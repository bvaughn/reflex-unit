#summary Step-by-step tutorial for creating a custom test results viewer - Part 3

= Part 3: Creating a Sample Test Suite =

If you would like a more detailed explanation of creating Reflex Unit tests, see the [GettingStartedWithReflexUnit Getting Started Guide]. For the purposes of this tutorial we are simply going to create a dummy "test" that executes asynchronously and returns random values (success, failure, or error).

By executing asynchronously we will be able to watch our viewer update itself in real time as tests finish executing. To do this, we'll use the built in Flash {{{Timer}}}. Let's define our test as follows:

== !RandomizedTest.as ==

{{{
package tests {
	import flash.events.TimerEvent;
	import flash.utils.Timer;
	
	import reflexunit.framework.TestCase;
	
	public class RandomizedTest extends TestCase {
		
		private var _errorOnTimerEvent:Boolean;
		private var _timer:Timer;
		
		// These dummy methods will each be executed since they begin with "test".
		public function test0():void { testMethodHelper(); }
		public function test1():void { testMethodHelper(); }
		public function test2():void { testMethodHelper(); }
		public function test3():void { testMethodHelper(); }
		public function test4():void { testMethodHelper(); }
		public function test5():void { testMethodHelper(); }
		public function test6():void { testMethodHelper(); }
		public function test7():void { testMethodHelper(); }
		public function test8():void { testMethodHelper(); }
		public function test9():void { testMethodHelper(); }
		
		// This helper method will create random, asynchronous test results.
		private function testMethodHelper( minTime:int = 250, maxTime:int = 500 ):void {
			var timerTime:int = minTime + ( Math.random() * ( maxTime - minTime ) ); 
			var timeOutTime:int;
			
			var random:Number = Math.random();
			
			// 65% chance of success
			if ( random < .65 ) {
				_errorOnTimerEvent = false;
				
				timeOutTime = maxTime * 2;
				
			// 25% chance of failure
			} else if ( random < .9 ) {
				_errorOnTimerEvent = false;
				
				timeOutTime = minTime / 2;
				
			// 10% chance of runtime error
			} else {
				_errorOnTimerEvent = true;
				
				timeOutTime = maxTime * 2;
			}
			
			_timer = new Timer( timerTime, 1 );
			_timer.addEventListener( TimerEvent.TIMER_COMPLETE, addAsync( onTimerComplete, timeOutTime ) );
			_timer.start();
			
			assertTrue( _timer.running, 'Timer should be running' );
		}
		
		private function onTimerComplete( event:TimerEvent ):void {
			_timer.removeEventListener( TimerEvent.TIMER_COMPLETE, onTimerComplete );
			
			if ( _errorOnTimerEvent ) {
				throw new Error( 'This is an expected error' );
			}
			
			var maxIndex:int = Math.round( Math.random() * 6 );
			
			for ( var index:int = 0; index <= maxIndex; index++ ) {
				assertTrue( true );
			}
			
			assertFalse( _timer.running, 'Timer should not be running' );
		}
	}
}
}}}

= Creating Individual Result Views =

= Tying it All Together =