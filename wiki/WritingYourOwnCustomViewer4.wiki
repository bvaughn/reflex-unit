#summary Step-by-step tutorial for creating a custom test results viewer - Part 4

= Part 4: Creating Individual Result Views =

We're going to move quickly through this next part. Although it contains the most source code, much of this code deals with Flex charting components and other areas that lie outside of the scope of this tutorial. For more information in these areas I recommend Google-searching one of the available "Flex Charting Explorer" applications.

As previously stated, a primary purpose of this tutorial is to illustrate a variety of ways in which Reflex Unit test result data may be displayed to a user/developer. The custom "viewer" we will create will be comprised of several smaller views or charts. Each of these charts will illustrate a different way of interpreting/displaying the outcome of tests.

== Overall / Summary Test Information ==

After running a suite of tests, your first thought may be "did they all pass?". For this purposes we'll be using a [http://livedocs.adobe.com/flex/3/langref/mx/charts/PieChart.html PieChart] to display the overall percentages of errors, failures, and successes.

To do this we will create 2 components: {{{OverallTestStatuses.mxml}}} and {{{OverallTestStatusesData.as}}}. You can think of these components as our view and model. (We will introduce the "controller" in the next section of this article.)

=== !OverallTestStatuses.mxml ===

{{{
<?xml version="1.0" encoding="utf-8"?>
<mx:HBox width="100%" height="100%" horizontalGap="20"
         horizontalAlign="center" verticalAlign="middle"
         xmlns:mx="http://www.adobe.com/2006/mxml">
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.graphics.SolidColor;
			
			[Bindable]	// Contains: OverallTestStatusesData
			public var dataProvider:ArrayCollection = new ArrayCollection();
		]]>
	</mx:Script>
	
	<mx:PieChart id="pieChart" width="100%" height="100%" maxWidth="475" maxHeight="300"
	             showAllDataTips="true"
	             dataProvider="{ dataProvider }">
		
		<mx:series>
			<mx:PieSeries nameField="statusName" field="count"
			              fills="{ [ new SolidColor( 0x990000 ), new SolidColor( 0xAAAA00 ), new SolidColor( 0x009900 ) ] }">
				
				<!-- Clear the ugly drop-shadow and bevel effects. -->
				<mx:filters>
					<mx:Array />
				</mx:filters>
				
			</mx:PieSeries>
		</mx:series>
		
	</mx:PieChart>
	
	<mx:VBox horizontalAlign="center" verticalGap="0">
		<mx:Text styleName="header" text="Overall" />
		<mx:Text styleName="header" text="Test" />
		<mx:Text styleName="header" text="Statuses" />
		
		<mx:Spacer height="25" />
		
		<mx:Legend dataProvider="{ pieChart }"/>
	</mx:VBox>
	
</mx:HBox>
}}}

=== !OverallTestStatusesData.as ===

{{{
package {
	import reflexunit.framework.statuses.IStatus;
	
	public class OverallTestStatusesData {
		
		public var count:int;
		public var statusName:String;
		
		public function OverallTestStatusesData( statusNameIn:String ) {
			statusName = statusName;
			count = 0;
		}
	}
}
}}}

== Individual Test Statuses ==

If one or more tests fail, you'll need a way to separate the failures. For this purpose we'll introduce our second chart, a [http://livedocs.adobe.com/flex/3/langref/mx/charts/ColumnChart.html ColumnChart] showing the outcomes of each individual test class. Like our previous chart, this too will consist of an MXML component (the view) and an !ActionScript class (the model):

=== !IndividualTestStatuses.mxml ===

{{{
<?xml version="1.0" encoding="utf-8"?>
<mx:HBox width="100%" height="100%" horizontalGap="20"
         horizontalAlign="center" verticalAlign="middle"
         xmlns:mx="http://www.adobe.com/2006/mxml">
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.graphics.SolidColor;
			
			[Bindable]	// Contains: IndividualTestStatusesData
			public var dataProvider:ArrayCollection = new ArrayCollection();
			
			private function getHorizontalAxis( categoryValue:Object, previousCategoryValue:Object, axis:CategoryAxis, categoryItem:Object ):String {
				var array:Array = categoryValue.toString().match( /\:(\w+)$/ );
				
				return array ? array[1] : categoryValue.toString();
			}
		]]>
	</mx:Script>
	
	<mx:ColumnChart id="columnChart" height="100%" width="100%" maxWidth="475" maxHeight="300"
	                showDataTips="true"
	                dataProvider="{ dataProvider }">
		
		<mx:horizontalAxis>
			<mx:CategoryAxis dataProvider="{ dataProvider }" categoryField="testCaseName"
			                 labelFunction="{ getHorizontalAxis }" />
		</mx:horizontalAxis>
		
		<mx:series>
			<mx:ColumnSeries xField="testCaseName" yField="successCount" displayName="Successes"
			                 fill="{ new SolidColor( 0x009900 ) }" />
			<mx:ColumnSeries xField="testCaseName" yField="failureCount" displayName="Failures"
			                 fill="{ new SolidColor( 0xAAAA00 ) }" />
			<mx:ColumnSeries xField="testCaseName" yField="errorCount" displayName="Errors"
			                 fill="{ new SolidColor( 0x990000 ) }" />
		</mx:series>
	</mx:ColumnChart>
	
	<mx:VBox horizontalAlign="center" verticalGap="0">
		<mx:Text styleName="header" text="Individual" />
		<mx:Text styleName="header" text="Test" />
		<mx:Text styleName="header" text="Statuses" />
		
		<mx:Spacer height="25" />
		
		<mx:Legend dataProvider="{ columnChart }"/>
	</mx:VBox>
	
</mx:HBox>
}}}

=== !IndividualTestStatusesData.as ===

{{{
package {
	import reflexunit.framework.statuses.Failure;
	import reflexunit.framework.statuses.IStatus;
	import reflexunit.framework.statuses.Success;
	import reflexunit.introspection.models.ClassModel;
	
	public class IndividualTestStatusesData {
		
		public var classModel:ClassModel;
		public var errorCount:int;
		public var failureCount:int;
		public var successCount:int;
		
		public function IndividualTestStatusesData( classModelIn:ClassModel ) {
			classModel = classModelIn;
			
			errorCount = 0;
			failureCount = 0;
			successCount = 0;
		}
		
		public function addStatus( status:IStatus ):void {
			if ( status is Failure ) {
				var failure:Failure = status as Failure;
				
				if ( failure.isFailure ) {
					_failureCount++;
				} else {
					_errorCount++;
				}
				
			} else if ( status is Success ) {
				_successCount++;
			}
		}
	}
}
}}}

== [WritingYourOwnCustomViewer5 Continue to Part 5..] ==